using RDPClient.Proxy;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace RDPClientTest
{
    class Program
    {
		static void Main(string[] args)
		{
			for (; ; )
			{
				//Log("SENDING REQUEST");
				int count = Environment.ProcessorCount * 250;
				Response response = Program.GetServerInfos(count);
				if (response != null)
				{
					if (response.MethodProxyType != null && response.MethodProxyType != "connect")
					{
						Log("Method proxy type: " + response.MethodProxyType);
					}
					if (response.ServerInfos != null && response.ServerInfos.Any<ServerInfo>())
                    {
						Log("--- SERVER INFOS ---");
						using (List<ServerInfo>.Enumerator enumerator = response.ServerInfos.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								ServerInfo serverInfo = enumerator.Current;
								Log("Server IP:" + serverInfo.ServerIp);
								Log("Server port:" + serverInfo.ServerPort.ToString());
								Log("Server username:" + serverInfo.Username);
								Log("Server password:" + serverInfo.Password);
							}
						}
					}
					else
                    {
						Log("No servers info :(");
					}
					if (response.ProxyInfos != null && response.ProxyInfos.Any<ProxyInfo>())
					{
						Log("--- PROXY INFOS ---");
						using (List<ProxyInfo>.Enumerator enumerator = response.ProxyInfos.GetEnumerator())
						{
							while (enumerator.MoveNext())
							{
								ProxyInfo proxyInfo = enumerator.Current;
								Log("Proxy IP: " + proxyInfo.Server);
								Log("Proxy port: " + proxyInfo.Port);
								Log("Proxy Type: " + proxyInfo.Type);
								Log("Proxy User: " + proxyInfo.User);
								Log("Proxy Password: " + proxyInfo.Pass);
							}
						}
					}
					else
					{
						//Log("No proxy info :(");
					}
				}
				else
                {
					//Log("Null response received :(");
				}
				//Log("-----------------------------------------------");
				Thread.Sleep(30000);
			}
		}
		private static Response GetServerInfos(int count)
		{
			string text = Program.SendAndReceiveFromServer(JSONSerializer<Request>.Serialize(new Request
			{
				Type = "getlist",
				Value = count.ToString()
			}));
			if (text != "")
			{
				//Console.WriteLine(text);
				return JSONSerializer<Response>.DeSerialize(text);
			}
			return null;
		}

		private static string SendAndReceiveFromServer(string data)
		{
			string result = "";
			Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
			try
			{
				socket.Connect("149.202.10.237", 4500);
				byte[] array = Encoding.UTF8.GetBytes(data);
				byte[] array2 = BitConverter.GetBytes(array.Length);
				if (Program.Send(socket, array2) && Program.Send(socket, array))
				{
					array2 = new byte[4];
					if (Program.Receive(socket, array2))
					{
						array = new byte[BitConverter.ToInt32(array2, 0)];
						if (Program.Receive(socket, array))
						{
							result = Encoding.UTF8.GetString(Program.Decompress(array));
						}
					}
				}
			}
			catch (Exception ex)
			{
			}
			if (socket.Connected)
			{
				socket.Shutdown(SocketShutdown.Both);
			}
			socket.Close();
			return result;
		}

		private static bool Send(Socket socket, byte[] buffer)
		{
			int num = 0;
			for (; ; )
			{
				int num2 = socket.Send(buffer, num, buffer.Length - num, SocketFlags.None);
				if (num2 == 0)
				{
					break;
				}
				num += num2;
				if (num == buffer.Length)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060000D9 RID: 217 RVA: 0x000072E4 File Offset: 0x000054E4
		private static bool Receive(Socket socket, byte[] buffer)
		{
			int num = 0;
			for (; ; )
			{
				int num2 = socket.Receive(buffer, num, buffer.Length - num, SocketFlags.None);
				if (num2 == 0)
				{
					break;
				}
				num += num2;
				if (num == buffer.Length)
				{
					return true;
				}
			}
			return false;
		}
		private static byte[] Decompress(byte[] gzip)
		{
			byte[] result;
			using (GZipStream gzipStream = new GZipStream(new MemoryStream(gzip), CompressionMode.Decompress))
			{
				byte[] buffer = new byte[4096];
				using (MemoryStream memoryStream = new MemoryStream())
				{
					int num;
					do
					{
						num = gzipStream.Read(buffer, 0, 4096);
						if (num > 0)
						{
							memoryStream.Write(buffer, 0, num);
						}
					}
					while (num > 0);
					result = memoryStream.ToArray();
				}
			}
			return result;
		}

		private static void Log(string line)
        {
			FileStream ostrm;
			try
			{
				ostrm = new FileStream("./Log.txt", FileMode.Append, FileAccess.Write);
			}
			catch (Exception e)
			{
				Console.WriteLine("Cannot open Log.txt for writing");
				Console.WriteLine(e.Message);
				return;
			}
			using (StreamWriter writer = new StreamWriter(ostrm))
			{
				writer.WriteLine(line);
			}
			Console.WriteLine(line);
			ostrm.Close();
		}
	}
}
